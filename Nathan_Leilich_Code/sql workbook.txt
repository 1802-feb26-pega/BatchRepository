--chinook password : p4ssw0rd

/*****************************************************
SQL Workbook   PART 1
*****************************************************/
--Nathan Leilich
/*****************************
    SECTION 2
*****************************/

----2.1
--Task1 - Select all records from the Employee table.

SELECT * 
FROM employee;

--Task2 - Select all records from the Employee table where last name is King.

SELECT * 
FROM employee
WHERE lastname = 'King';

--Task3 - Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.

SELECT *
FROM employee
WHERE firstname = 'Andrew' AND
reportsto IS NULL;

-----------------
----2.2
--Task1 - Select all albums in Album table and sort result set in descending order by title.

SELECT *
FROM album
ORDER BY title DESC;

--Task2 - Select first name from Customer and sort result set in ascending order by city
        
SELECT firstname
FROM customer
ORDER BY city ASC;
  
-----------------   
----2.3
--Task1 - Insert two new records into Genre table

INSERT INTO genre
VALUES (26, 'tuvan throat singing');

INSERT INTO genre
VALUES (27, 'gregorian chant');

--Task2 - Insert two new records into Employee table

INSERT INTO employee
VALUES (9, 'bob', 'vila', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO employee
VALUES (10, 'not bob', 'vila', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

--Task3 - Insert two new records into Customer table
        
INSERT INTO customer
VALUES (60, 'bob', 'vila', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'email', NULL);

INSERT INTO customer
VALUES (61, 'not bob', 'vila', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'not email', NULL);
    
-----------------    
----2.4
--Task1 - Update Aaron Mitchell in Customer table to Robert Walter

UPDATE customer
SET lastname = 'Walter', firstname = 'Robert'
WHERE lastname = 'Mitchell' AND firstname = 'Aaron';

--Task2 - Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
        
UPDATE artist
SET name = 'CCR'
WHERE name = 'Creedence Clearwater Revival';

-----------------
----2.5
--Task - Select all invoices with a billing address like “T%”        
  
SELECT *
FROM invoice
WHERE billingaddress LIKE 'T%';
 -----------------       
----2.6
--Task1 - Select all invoices that have a total between 15 and 50

SELECT *
FROM invoice
WHERE total BETWEEN 15 AND 50;

--Task2 - Select all employees hired between 1st of June 2003 and 1st of March 2004
        
SELECT *
FROM employee
WHERE hiredate BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';
 
-----------------       
----2.7
--Task - Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).

ALTER TABLE invoice
DROP CONSTRAINT FK_InvoiceCustomerId;
    
DELETE FROM customer
WHERE firstname = 'Robert' AND lastname = 'Walter';

/*****************************
    SECTION 3
*****************************/
      
----3.1
--Task1 – Create a function that returns the current time.

CREATE OR REPLACE FUNCTION get_current_time
RETURN TIMESTAMP IS l_systimestamp TIMESTAMP;
BEGIN
    SELECT systimestamp
    INTO l_systimestamp
    FROM dual;
    RETURN l_systimestamp;
END;
/

--Task2 – create a function that returns the length of a mediatype from the mediatype table

CREATE OR REPLACE FUNCTION get_mediatype_length(type_id IN NUMBER)
RETURN NUMBER IS type_length NUMBER;
BEGIN
    SELECT LENGTH(name)
    INTO type_length
    FROM mediatype
    WHERE mediatypeid = type_id;
    RETURN type_length;
END;
/

SELECT get_mediatype_length(1) FROM dual;

-----------------       
----3.2
--Task1 – Create a function that returns the average total of all invoices

CREATE OR REPLACE FUNCTION get_average_total_invoices
RETURN NUMBER IS average NUMBER;
BEGIN
    SELECT AVG(total)
    INTO average
    FROM invoice;
    RETURN average;
END;
/

SELECT get_average_total_invoices FROM dual;

--Task2 – Create a function that returns the most expensive track
--not complete
CREATE OR REPLACE FUNCTION get_most_expensive_track
RETURN VARCHAR2 IS return_track VARCHAR2;
BEGIN
    SELECT name
    INTO return_track
    FROM track
    WHERE 
END;
/
    
    
SELECT name
FROM track
WHERE unitprice in (
SELECT MAX(unitprice)
FROM track);


-----------------       
----3.3
--Task – Create a function that returns the average price of invoiceline items in the invoiceline table



-----------------       
----3.4
--Task – Create a function that returns all employees who are born after 1968.



/*****************************
    SECTION 4
*****************************/
      
----4.1
--Task – Create a stored procedure that selects the first and last names of all the employees.



-----------------       
----4.2
--Task1 – Create a stored procedure that updates the personal information of an employee.



--Task1 – Create a stored procedure that returns the managers of an employee.



-----------------       
----4.3
--Task – Create a stored procedure that returns the name and company of a customer.



/*****************************
    SECTION 5
*****************************/

--Task1 – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).



--Task2 – Create a transaction nested within a stored procedure that inserts a new record in the Customer table



/*****************************
    SECTION 6
*****************************/

--Task1 - Create an after insert trigger on the employee table fired after a new record is inserted into the table.



--Task2 – Create an after update trigger on the album table that fires after a row is inserted in the table



--Task3 – Create an after delete trigger on the customer table that fires after a row is deleted from the table.



/*****************************
    SECTION 7
*****************************/

----7.1
--Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
        
SELECT invoice.invoiceid, customer.firstname, customer.lastname
FROM invoice 
INNER JOIN customer ON invoice.customerid = customer.customerid;

-----------------      
----7.2
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.   
        
SELECT customer.customerid, customer.firstname, customer.lastname, invoice.invoiceid, invoice.total
FROM customer
FULL OUTER JOIN invoice ON customer.customerid = invoice.customerid;


-----------------        
----7.3
--Task – Create a right join that joins album and artist specifying artist name and title.        
     
SELECT artist.name, album.title
FROM artist
RIGHT JOIN album ON artist.artistid = album.albumid;

-----------------        
----7.4
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.       
     
SELECT *
FROM artist
CROSS JOIN album
ORDER BY artist.name ASC;

-----------------        
----7.5
--Task – Perform a self-join on the employee table, joining on the reportsto column.

SELECT *
FROM employee empa, employee empb
WHERE empa.reportsto = empb.reportsto;

/*****************************************************
SQL Workbook   PART 2
*****************************************************/
------------
--notes
------------
CREATE OR REPLACE PROCEDURE get_all_artists(cursorParam OUT sys_refcursor)
IS                                       --(varName IN/OUT TYPE)

BEGIN
    OPEN cursorParam FOR
    SELECT * FROM artist;
END get_all_artists;
/

VARIABLE cursorParam refcursor;
EXECUTE get_all_artists(:cursorParam);
PRINT cursorParam;


CREATE SEQUENCE artist_seq
MINVALUE 1
MAXVALUE 99999999999
INCREMENT BY 1
START WITH 276;
/

DROP SEQUENCE artist_seq;

CREATE OR REPLACE TRIGGER artist_trgr
BEFORE INSERT ON artist
FOR EACH ROW

BEGIN
    SELECT artist_seq.NEXTVAL
    INTO :new.artistid
    FROM dual;
END;
/

INSERT INTO artist(name) VALUES ('skdlfjlsdjfls');

 
